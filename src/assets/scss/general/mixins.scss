// =============================================================================
// Convert px to rem
// =============================================================================

@function calculateRemFromPixel($pixelSize) {
	$remSize: $pixelSize / $base-size;
	@return #{$remSize}rem;
}
@function calculateEmFromPixel($pixelSize) {
	$remSize: $pixelSize / $base-size;
	@return #{$remSize}em;
}

// =============================================================================
// Breakpoint
// =============================================================================

@mixin breakpoint($size){
	@each $point in $breakpoints {
		@if($size == map-get($point, name)){
			@media (min-width: map-get($point, size)){
				@content;
			}
		}
	}
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Mixins
// =============================================================================

// Font face
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

// Font smooting
@mixin fontSmooting() {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

// Font size
@mixin font-size($fs-map) {
	@each $bp, $fs in $fs-map{
		@if $bp == null {
			@include font-format($fs);
		}
		@else {
			@include breakpoint($bp){
				@include font-format($fs);
			}
		}
	}
	@include fontSmooting();
}

// Go trough defined maps
@mixin font-format($fs) {
	@if type-of($fs) == "list" {
		font-size: calculateRemFromPixel(nth($fs, 1));
		@if (length($fs) > 1) {
			line-height: calculateRemFromPixel(nth($fs, 2));
		}
		@if (length($fs) > 2) {
			letter-spacing: calculateRemFromPixel(nth($fs, 3));
		}
	}
	@else {
		font-size: $fs;
	}
}